"""
This application queries the Coinbase API and notifies the user via Pushbullet when
their crypto of choice reaches a specific threshold value.
"""


######### USER SETTINGS! ##############################################

### Pushbullet settings ###
# https://www.pushbullet.com/
# The API Token (key) generated by your Pushbullet account.
PUSH_TOKEN = r"o.kjJKHsdfjkhgsdfGJKHijbsdf"

### Coinbase settings ###
# https://pro.coinbase.com
# The ID of the product endpoint.  Examples:  XRP-USD, BTC-USD, ETH-USD
PRODUCT_ID = "XRP-USD"

# The price per unit at which you want the push notification sent.
PRICE_THRSHOLD = 0.55

# Is it an "UPPER" threshold or "LOWER" threshold?  "UPPER" means you will be notified
# when the price go above the threshold, and "LOWER" when it goes below the threshold.
THRESHOLD_DIRECTION = "UPPER"

### General Settings ###
# Would you like the price and "Message Sent!" to print to the console? True/False
PRINT_TO_CONSOLE = True

# The time in seconds that the application should wait until another notification
# is sent via pushbullet.  Default is 21600 seconds (6 hours).
WAIT_TIME = 21600

#######################################################################


# Built-in modules
import time

# Downloaded modules
import cbpro
import requests
import json

# Local modules
import settings as s
import push_notification as pn


def pushbullet_message(title: str, body: str):
    """
    Send a basic message with a title, and message body.

    Arguments:
        title = str: The title used in the push notification.
        body = str: The contents of the message used in the push notification.

    Returns:
        None
    """
    msg = {"type": "note", "title": title, "body": body}
    resp = requests.post('https://api.pushbullet.com/v2/pushes', 
                         data=json.dumps(msg),
                         headers={'Authorization': 'Bearer ' + PUSH_TOKEN,
                                  'Content-Type': 'application/json'})
    if resp.status_code != 200:
        raise Exception('Error',resp.status_code)
    else:
        print ('Message sent') 


def main():
    """
    The main portion of the application.
    """
    pc = cbpro.PublicClient()

    while True:
        try:
            current_ticker = pc.get_product_ticker(product_id=PRODUCT_ID)
            current_ticker = float(current_ticker['price'])
            print(f"{PRODUCT_ID} = {current_ticker}")
            if current_ticker >= PRICE_THRSHOLD and THRESHOLD_DIRECTION == "UPPER":
                pn.pushbullet_message(f"{PRODUCT_ID} Alert",
                                    f"Price of {PRODUCT_ID}: {current_ticker}\nThreshold set to: {PRICE_THRSHOLD}")
                time.sleep(WAIT_TIME) # sleep for 6 hours.
            if current_ticker <= PRICE_THRSHOLD and THRESHOLD_DIRECTION == "LOWER":
                pn.pushbullet_message(f"{PRODUCT_ID} Alert",
                                    f"Price of {PRODUCT_ID}: {current_ticker}\nThreshold set to: {PRICE_THRSHOLD}")
                time.sleep(WAIT_TIME) # sleep for 6 hours.
        except KeyboardInterrupt:
            break
        except ConnectionError:
            continue
        finally:
            time.sleep(10)


if __name__ == "__main__":
    main()
